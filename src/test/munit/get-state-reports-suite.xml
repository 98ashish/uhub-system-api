<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="get-state-reports-suite.xml" />
	<munit:test name="get:\reports:uhub_sapi-config-test" doc:id="8327b129-e902-4a8f-8ca6-041ddfc30c60" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fetch Reports By State" doc:id="ccedc070-dc50-4640-8f01-f17c0bda6562" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f666c640-bfe4-4d4a-bca2-8185163c2283" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsuhubsapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="where_state_is" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="41e7d5b4-58ea-40c7-933a-e96f7646ba4c">
				<munit:payload value="#[output application/json --- readUrl('classpath://getreportsuhubsapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getreportsuhubsapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsuhubsapiconfigtest\set-event_variable_.dwl')]" />
					<munit:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to get:\reports:uhub_sapi-config" doc:id="b4ddadef-7a68-47d0-aef0-43b5b77d2229" name="get:\reports:uhub_sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c8aa93c9-14bf-4415-8726-e75a31385166" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getreportsuhubsapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\reports:uhub_sapi-config-test1" doc:id="b717a0c5-02ad-480b-9ff8-c9a284c84fd9" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Fetch Reports By State" doc:id="2af2d4c4-d35b-451b-9644-37a9ae3e3c10" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f666c640-bfe4-4d4a-bca2-8185163c2283" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest1\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsuhubsapiconfigtest1\mock_variable_.dwl')]" />
						<munit-tools:variable key="where_state_is" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest1\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest1\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="9a5a4a01-5cad-40f0-9d14-cfa6378fa60e">
				<munit:payload value="#[output application/json --- readUrl('classpath://getreportsuhubsapiconfigtest1\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getreportsuhubsapiconfigtest1\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsuhubsapiconfigtest1\set-event_variable_.dwl')]" />
					<munit:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsuhubsapiconfigtest1\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to get:\reports:uhub_sapi-config" doc:id="2de8cb5f-87f4-47c1-a66e-53c5547bd1cb" name="get:\reports:uhub_sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ebd23cef-500e-44fc-b027-ec188e13ccf6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getreportsuhubsapiconfigtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get-reports-by-state-test" doc:id="c73089f8-81c4-4627-9931-e6443d85b65d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select Casetype By State" doc:id="619e772c-0a95-4b69-8928-be756cc44406" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="66b3c076-8397-4f48-8f5e-0a6b3a9cd235" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getreportsbystatetest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsbystatetest\mock_variable_.dwl')]" />
						<munit-tools:variable key="where_state_is" value="#[output application/java --- readUrl('classpath://getreportsbystatetest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsbystatetest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="5a21bdc9-32da-4540-a628-a05aaac6ba74">
				<munit:payload value="#[output application/json --- readUrl('classpath://getreportsbystatetest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://getreportsbystatetest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getreportsbystatetest\set-event_variable_.dwl')]" />
					<munit:variable key="where_state_is" value="#[output application/java --- readUrl('classpath://getreportsbystatetest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="transactionId" value="#[output application/java --- readUrl('classpath://getreportsbystatetest\set-event_variable_2.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to get-reports-by-state" doc:id="b2b9a51b-dd65-4a8f-ba71-164e33d08bd0" name="get-reports-by-state"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a893ab79-23e7-4bc3-a5ff-28d290a786e1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getreportsbystatetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
